module x_bit_right_shifter #(
    SIZE = 32 : SIZE > 0,
    SHIFT = 8 : SHIFT > -1 & SHIFT < SIZE
)(
    input a[SIZE],
    input shift,
    input pad,
    output out[SIZE]
)
{
    mux_2 mux_2_32[SIZE]
    sig shifted_bits[SIZE]
    
    always {
        // assign value to shifted_bits[32] depending on the value of SHIFT
        shifted_bits = c{SHIFTx{pad}, a[SIZE-1:SHIFT]}
        // connect the selector of each mux_2 with shift
        mux_2_32.s0 = SIZEx{shift}
        
        // use a repeat-loop to: 
        repeat(i, SIZE) {
            // connect input[0] of each mux_2 with a[i]
            // connect input[1] of each mux_2 with the shifted_bits[i] 
            mux_2_32.in[i][0] = a[i] // original a value
            mux_2_32.in[i][1] = shifted_bits[i] // shifted a value
        }
        out = mux_2_32.out
    }
}