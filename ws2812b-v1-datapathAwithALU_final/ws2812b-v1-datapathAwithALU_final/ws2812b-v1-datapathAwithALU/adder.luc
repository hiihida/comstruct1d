module adder #(
    SIZE ~ 32 : SIZE > 1
)(
    input a[SIZE],
    input b[SIZE],
    input alufn_signal[6],
    output out[SIZE],
    output z,
    output v,
    output n
) {
    
    rca rca(#SIZE(SIZE))
    sig xb[SIZE]
    always {
        // implement adder/subtractor unit logic here
        xb = b ^ SIZEx{alufn_signal[0]} // flip b bits
        rca.a = a
        rca.b = xb
        rca.cin = alufn_signal[0] // 0 cin = add, 1 cin = subtract
        
        out = rca.s
        z = ~|rca.s // reduction OR + inverse (output is 000 -> z = 1)
        // compare MSBs of a, xb, s
        v = (~a[SIZE-1] & ~xb[SIZE-1] & rca.s[SIZE-1]) | (a[SIZE-1] & xb[SIZE-1] & ~rca.s[SIZE-1]) 
        n = rca.s[SIZE-1]
        
        // handle negative output
        //if (rca.cout == 1) { // if msb of overflowed bit is 1
            //out = ~(rca.s - 1) // 2's complement but i cant use -1 so idk
        //}
        
    }
}